generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Contato {
  id        String   @id @default(uuid())
  nome      String
  email     String
  telefone  String?
  mensagem  String
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("agil_contatos")
}

model Usuario {
  id            String      @id @default(uuid())
  nome          String
  email         String      @unique
  telefone      String?
  senha         String
  tipo          TipoUsuario
  dataNasc      DateTime?
  cpf           String?     @unique
  rg            String?     @unique
  cnh           String?     @unique
  cep           String?
  endereco      String?
  bairro        String?
  cidade        String?
  estado        String?
  numero        String?
  complemento   String?
  descricao     String?
  profissao     String?
  estadoCivil   String?
  nacionalidade String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Veiculo       Veiculo[]
  Contratos     Contrato[]

  @@map("agil_usuarios")
}

model Veiculo {
  id             Int          @id @default(autoincrement())
  nome           String
  descricao      String
  marca          String
  ano            Int
  placa          String       @unique
  valor          Float
  cor            String
  quilometragem  Int
  vendido        Boolean      @default(false)
  tipo           TipoVeiculo
  sistema        Sistema
  combustivel    Combustivel? @default(gasolina)
  localizacao    String?      @default("Fortaleza")
  imagem         String
  codigoCRV      String?      @unique
  seguro         Boolean      @default(false)
  rastreador     Boolean      @default(false)
  transferido    Boolean      @default(false)
  regularizado   Boolean      @default(false)
  quitado        Boolean      @default(false)
  valorEntrada   Float?
  valorVenda     Float?
  infoAdicionais String?
  usuarioId      String?
  usuario        Usuario?     @relation(fields: [usuarioId], references: [id])
  contratos      Contrato[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("agil_veiculos")
}

model Contrato {
  id                      String      @id @default(uuid())
  banco                   String
  valorTotalFinanciamento Float
  dataPagamento           DateTime
  valorParcela            Float
  parcelaAtual            Int
  totalParcelas           Int
  status                  String
  valorFinalEntrada       Float
  descricaoEntrada        String
  sinal                   String      @default("Sem sinal")
  usuarioId               String
  veiculoId               Int
  usuario                 Usuario     @relation(fields: [usuarioId], references: [id])
  veiculo                 Veiculo     @relation(fields: [veiculoId], references: [id])
  pagamentos              Pagamento[]
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  @@map("agil_contratos")
}

model Pagamento {
  id             String          @id @default(uuid())
  valorParcela   Float
  numeroParcela  Int
  dataVencimento DateTime
  status         StatusPagamento @default(PENDENTE)
  contratoId     String
  contrato       Contrato        @relation(fields: [contratoId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("agil_pagamentos")
}

enum TipoUsuario {
  admin
  cliente
  despachante
  vendedor
}

enum TipoVeiculo {
  carro
  moto
  caminhao
  onibus
  bicicleta
  outros
}

enum Sistema {
  manual
  automatico
  semi_automatico
  cvt
  carburador
  injetado
}

enum Combustivel {
  gasolina
  alcool
  diesel
  flex
  hibrido
  eletrico @map("el√©trico")
}

enum StatusPagamento {
  PENDENTE
  PAGO
  ATRASADO
}
